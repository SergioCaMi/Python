-- Fichero que se guardara, con la extensión .sql
-- Posicionarse en la BBDD ha trabajar
USE NEPTUNO

-- SELECT * FROM Categorías;
-- GO
-- si quiero ver solo algun campo, poner su nombre
SELECT NombreCategoría FROM Categorías;
SELECT NombreCategoría, Descripción FROM Categorías;
-- TENEMOS 2 PARTES SUJETO Y PREDICADO, EL SUJETO ES HASTA ANTES
-- DEL FROM Y EL PREDICADO A PARTIR DEL FROM
SELECT * FROM Pedidos;
-- VAMOS A ORDENAR, CON ORDER BY EN EL PREDICADO, POR DEFECTO EN ASCENDENTE
SELECT * FROM Pedidos ORDER BY PaísDestinatario ASC;
-- EN ORDEN DESCENDENTE
SELECT * FROM Pedidos ORDER BY PaísDestinatario DESC;
-- ORDENAR POR + DE 1 CAMPO
SELECT * FROM Pedidos ORDER BY PaísDestinatario, CiudadDestinatario;
-- EL FILTRADO SE HACE EN EL PREDICADO MEDIANTE WHERE, OJO QUE EN SQL
-- LOS STRING VAN CON COMILLA SIMPLE
SELECT * FROM Pedidos WHERE PaísDestinatario='Alemania';
-- filtrar + ordenar
SELECT * FROM Pedidos WHERE PaísDestinatario='Alemania' ORDER BY CiudadDestinatario;
-- FILTRO DE REGISTROS EN EL SUJETO, SERIA EL TOP
SELECT TOP 50 * FROM Pedidos ORDER BY CiudadDestinatario;
-- EN EL SUJETO PUEDO HACER OPERACIONES ARITMETICAS
SELECT PrecioUnidad, Cantidad, (PrecioUnidad*Cantidad) as Importe FROM [Detalles de pedidos];

-- PUEDO AGRUPAR CON GROUP BY
-- COMO COMBINAR 2 TABLAS, CON JOIN INNER JOIN, LEFT JOIN, RIGHT JOIN
-- EL INNER JOIN IMPLICITO
SELECT * FROM Pedidos, [Detalles de pedidos] WHERE Pedidos.IdPedido = 
[Detalles de pedidos].IdPedido

-- EL PROXIMO DIA, CONTINUAREMOS VIENDO SQL, DESPUES COMO APLICARLO CON
-- PYTHON, TANTO SELECT, MODIFICAR REGSITROS
-- EL VIERNES ES EL ULTIMO DIA, VEREMOS MATRICES NON NUMPY, HAREMOS
-- UN MODELO PREDICTIVO SCIKIT-LEARN (REGRESION LINEAL)
-- 1 MAQUINA FABRICO 100 CAJAS
-- 2 MAQUINAS FABRICO 200 CAJAS
-- 3 MAQUINAS ¿CUANTAS FABRICO?

